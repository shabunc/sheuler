#!/usr/bin/env lua
package.path = package.path .. ";../modules/?.lua"

require("numeric")
require("array")
memoize = require("memoize")

function tris(n)
    if n == 1 or n == 2 or n == 3 then
        return 1
    end
    return tris(n - 1) + tris(n - 2) + tris(n - 3)
end
tris = memoize(tris)

function collect(max)
    local n = 1
    local res = {}
    while tris(n) < max do
        local divs = numeric.propers(tris(n))
        for _, d in ipairs(divs) do
            table.insert(res, d)
        end
        n = n + 1
    end
    table.sort(res)
    res = array.uniq(res)
    return res
end

function fromhaskell()
    return
    {1,3,5,7,9,11,13,15,17,19,21,25,29,31,35,39,41,43,47,53,55,57,65,67,71,73,75,83,93,105,109,119,121,123,137,141,159,171,179,191,193,195,209,219,239,265,275,279,301,311,355,365,415,423,431,477,573,589,653,689,719,795,877,913,971,1095,1201,1293,1325,1331,1363,1439,1555,1767,1825,1969,2067,2209,2491,2631,2749,2809,3109,3421,3869,3947,3975,4003,4063,5301,5475,5981,6113,7473,7775,7831,8247,8427,9179,9327,10037,10043,10487,11607,12009,13661,13745,14447,16981,17105,18769,19345,21557,22289,22419,23493,23873,25281,27803,27981,29023,30111,31461,35957,41235,41867,46499,50185,52435,58035,68725,85525,87069,96443,96725,102769,107871,110473,129581,130481,145115,145697,146123,150555,157305,158917,164777,167507,186791,200677,206175,209819,231017,257183,264449,289329,290175,377299,391443,409583,423491,435345,437091,438369,494331,502521,532159,540739,602031,629457,652405,668267,693051,728485,745141,806287,978793,1003385,1128209,1131897,1257523,1306741,1315107,1397269,1482993,1725293,1800281,1886495,1957215,2185455,2727647,2894989,3010155,3199433,3311233,3642425,5016925,5175879,5659485,6090307,6867787,7744519,8182941,8196551,10635881,10927275,11120407,11201821,12410299,12697073,15050775,15499483,17091331,20603361,21435971,23233557,31907643,33361221,35193763,36229513,36251161,37895489,40460743,53179405,69700671,74081243,99568327,108753483,128199521,133380239,144565291,159538215,202303715,235795681,245324507,259528127,265552939,265897025,291303851,294490177,298704981,326260449,387131393,433695873,480483973,688772059,797691075,873911553,924761051,1123785991,1456519255,1467182629,1816696889,2066316177,2698569577,2774283153,2811034319,2921082329,3358241669,3371357973,3786950063,4165889171,4258445323,4369557765,4411978159,4963443281,6198948531,9129195487,10114073919,11360850189,16791208345,18934750315,21351933829,29323528979,30883847113,32131905619,38241039569,56804250945,64055801487,87970586937,104479306403,146617644895,192167404461,353450961809,398572012981,439852934685,650097672673,733088224475,1195716038943,2199264673425,4045078385041}
end

function problem225(n)
    --local divs = collect(2 * 10^17)
    local divs = fromhaskell()
    local count = 0
    print("found ", #divs)
    for j = 1, divs[#divs], 2 do
        found = array.index_of(divs, j)
        if found == 0 then
            print(count, j, found)
            count = count + 1
            if count  == n  then
                break
            end
        end
    end
end

problem225(124)

